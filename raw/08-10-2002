const util = require('util');
const moment = require('moment');
const config = require('./mysql.config');
const sequelize = require('./sequelize.config');
const mysql = require('mysql2/promise');
const client = require('./redis.config');

// Create MySQL connection pool
const pool = mysql.createPool(config);

const TestMySQLConnection = async () => {
  try {
    const connection = await pool.getConnection();
    console.log(`Connected to MySQL database successfully at Host: ${config.host}, Port: ${config.port}, Database: ${config.database}.`);
    connection.release();
  } catch (error) {
    console.error(`Error connecting to MySQL database: ${error.message}`, { stack: error.stack });
  }
};

const TestSequelizeConnection = async () => {
  try {
    for (const key in sequelize) {
      await sequelize[key].authenticate();
      console.log(`Sequelize connection established successfully for database: ${key}`);
    }
  } catch (error) {
    console.error(`Unable to connect to Sequelize database: ${error.message}`, { stack: error.stack });
  }
};

// const TestSequelizeConnection = async () => {
//   try {
//     sequelize;
//     console.log(`Sequelize connection established successfully at Host: ${config.host}, Port: ${config.port}, Database: ${config.database}.`);
//   } catch (error) {
//     console.error(`Unable to connect to Sequelize database: ${error.message}`, { stack: error.stack });
//   }
// };

// Promisify Redis methods for better async/await support
['get', 'set', 'del', 'exists', 'quit'].forEach(method => {
  client[method] = util.promisify(client[method]).bind(client);
});

// Handle Redis connection errors
client.on('error', (err) => {
  console.error('Redis connection error:', { error: err.message, stack: err.stack });
});

// Handle Redis connection end
client.on('end', () => {
  console.log('Redis connection closed.');
});

const ConnectRedis = async () => {
  try {
    // Check if the client is already connected
    if (!client.isOpen) {
      await client.connect();
      console.log(`Redis connected on port 13742 at ${moment().format('llll')}.`);
    } else {
      console.log('Redis client is already connected.');
    }
  } catch (error) {
    console.error('Failed to connect to Redis:', { error: error.message, stack: error.stack });
  }
};

// Call connection test functions immediately for validation
const initializeConnections = async () => {
  await TestMySQLConnection();
  await TestSequelizeConnection();
  await ConnectRedis();
};

initializeConnections();

// Graceful shutdown on process exit
const gracefulShutdown = async () => {
  console.log('Initiating graceful shutdown...');
  try {
    if (client.isOpen) {
      await client.quit();
      console.log('Redis connection closed on shutdown.');
    }
  } catch (error) {
    console.error('Error closing Redis connection on shutdown:', { error });
  }
};

process.on('SIGINT', gracefulShutdown);
process.on('SIGTERM', gracefulShutdown);

module.exports = {
  pool,
  sequelize,
  TestMySQLConnection,
  TestSequelizeConnection,
  ConnectRedis
};










































const { Sequelize } = require('sequelize');
require('dotenv').config();

const isProduction = process.env.NODE_ENV === 'production';

const DB_HOST = isProduction ? process.env.P_DB_HOST : process.env.L_DB_HOST;
const DB_USER = isProduction ? process.env.P_DB_USER : process.env.L_DB_USER;
const DB_PASSWORD = isProduction ? process.env.P_DB_PASSWORD : process.env.L_DB_PASSWORD;
const DB_DIALECT = process.env.DB_DIALECT || 'mysql';
const DB_PORT = process.env.DB_PORT || 3306;

const DATABASES = {
  MAIN_DB_NAME: process.env.MAIN_DB_NAME,
  COMPLIANCE_LEGAL_DB_NAME: process.env.COMPLIANCE_LEGAL_DB_NAME,
  DATA_ANALYTIC_DB_NAME: process.env.DATA_ANALYTIC_DB_NAME,
  FINANCE_ACCOUNTING_DB_NAME: process.env.FINANCE_ACCOUNTING_DB_NAME,
  HEALTHCARE_DB_NAME: process.env.HEALTHCARE_DB_NAME,
  HR_DB_NAME: process.env.HR_DB_NAME,
  INVENTORY_MANAGEMENT_DB_NAME: process.env.INVENTORY_MANAGEMENT_DB_NAME,
  IT_DEVELOPMENT_DB_NAME: process.env.IT_DEVELOPMENT_DB_NAME,
  LOGISTIC_DB_NAME: process.env.LOGISTIC_DB_NAME,
  PARTNERSHIP_DB_NAME: process.env.PARTNERSHIP_DB_NAME,
  PHARMACY_DB_NAME: process.env.PHARMACY_DB_NAME,
  SALES_MARKETING_DB_NAME: process.env.SALES_MARKETING_DB_NAME,
};

const initDatabases = () => {
  const sequelizeInstances = {};
  for (const [key, dbName] of Object.entries(DATABASES)) {
    sequelizeInstances[key] = new Sequelize(dbName, DB_USER, DB_PASSWORD, {
      host: DB_HOST,
      dialect: DB_DIALECT,
      port: DB_PORT,
      logging: (msg) => console.log(msg),
      pool: {
        max: 15,
        min: 0,
        acquire: 60000,
        idle: 10000,
      },
    });
  }
  return sequelizeInstances;
};

const sequelize = initDatabases();

module.exports = sequelize; 